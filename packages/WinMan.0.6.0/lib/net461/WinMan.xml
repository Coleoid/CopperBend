<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinMan</name>
    </assembly>
    <members>
        <member name="T:WinMan.KeyPressEventArgs">
            <summary>
            Passed to KeyPressEventHandler functions.  Contains an RLKeyPress detailing information about the key that was pressed. Cancelable.
            </summary>
        </member>
        <member name="P:WinMan.KeyPressEventArgs.KeyPress">
            <summary>
            Information about the key that was pressed.
            </summary>
        </member>
        <member name="P:WinMan.KeyPressEventArgs.Cancel">
            <summary>
            Whether or not the event is to be cancelled.  If you wish to supress a keypress, to say that you've handled it, in your KeyPressEventHandler function,
            set the KeyPressEventArgs Cancel to true.  The event will then automatically not be passed on to any further handlers.
            </summary>
        </member>
        <member name="M:WinMan.KeyPressEventArgs.#ctor(RLNET.RLKeyPress)">
            <summary>
            Constructor.
            </summary>
            <param name="keyPress">RLKeyPress representing the key that was pressed.</param>
        </member>
        <member name="T:WinMan.Engine">
            <summary>
            Contains some information and events that are effectively global.  The only thing that really needs to be done with this class outside of the base Panel and
            Screen class is to call Init when the program starts.  This is effectively they way to get yourself a root console.  Then call Run() when you want to call the
            root console's run.  Any time you need access to the root console, it is static so from any class Engine.rootConsole is sufficient.
            </summary>
        </member>
        <member name="P:WinMan.Engine.RootConsole">
            <summary>
            The root console for the program.
            </summary>
        </member>
        <member name="E:WinMan.Engine.UpdateRealTimeLayouts">
            <summary>
            Any event handlers that are added to this event are called BEFORE any offscreen consoles are blitted to the root console, but AFTER any Update()
            handlers.  Used by panels that need to update their offscreen consoles (clear and reset them) in real-time (every time a render frame happens)
            NOTE: the actual RENDERING is real-time regardless.  Every frame, the ROOT console is cleared, and all offscreen consoles from panels are blitted to it.
            </summary>
        </member>
        <member name="E:WinMan.Engine.Render">
            <summary>
            This is the event that is designed to call every panel's render function each frame.  Panels automatically add their render functions to this handler when
            they are shown, there is no need to do it manually.
            </summary>
        </member>
        <member name="E:WinMan.Engine.KeyPress">
            <summary>
            This event is designed to be used by panels to handle keys that are pressed.  It is cancelable.
            </summary>
        </member>
        <member name="P:WinMan.Engine.Fullscreen">
            <summary>
            Whether or not the window is fullscreen.
            </summary>
        </member>
        <member name="M:WinMan.Engine.Init(RLNET.RLSettings)">
            <summary>
            Just initializes RLRootConsole. Don't call more than once, should just be likely at the start of your main.  WILL ERROR IF CALLED MORE THAN ONCE
            </summary>
            <param name="settings">Settings passed to root console to initialize.</param>
        </member>
        <member name="M:WinMan.Engine.Run">
            <summary>
            Kick off the entire system.  Effectively like calling the run of the root console.
            </summary>
        </member>
        <member name="M:WinMan.Engine.ToggleFullscreen">
            <summary>
            Makes the window fullscreen if it is not, or normal if it is fullscreen.
            </summary>
        </member>
        <member name="T:WinMan.KeyHandler">
            <summary>
            KeyHandler can be subclassed to represent anything that handles keys.  Panels have an OnKeyPress function by default, so this class
            can be subclassed to represents something that ONLY handles keys.  This allows objects that are not panels to handle keypresses.
            </summary>
        </member>
        <member name="P:WinMan.KeyHandler.Handling">
            <summary>
            Whether or not this key handling is currently among those set to receive keypresses.  StartHandling and StopHandling modify
            this value.
            </summary>
        </member>
        <member name="M:WinMan.KeyHandler.#ctor">
            <summary>
            Constructor.  By default, it does NOT begin handling key presses.  Call StartHandling to cause the handler to begin receiving key presses.
            </summary>
        </member>
        <member name="M:WinMan.KeyHandler.OnKeyPress(System.Object,WinMan.KeyPressEventArgs)">
            <summary>
            Should be implemented to handle key presses as necessary.  If a key should be handled in such a way as that subsequent panel/key handlers should
            not be given the opportunity to handle the key, change the Cancel parameter of the KeyPressEventArgs given to true.
            </summary>
            <param name="sender">Sender of the key press.</param>
            <param name="e">Argument telling what key was pressed, etc., as well as as allowing the event to be "Canceled" such that it will not
            propegate to subsequent handlers.</param>
        </member>
        <member name="M:WinMan.KeyHandler.StartHandling">
            <summary>
            Adds this KeyHandler to the top of the stack of handlers that receive keypresses, if it is not already doing so.  Otherwise,
            prints a warning to console and does nothing.
            </summary>
        </member>
        <member name="M:WinMan.KeyHandler.StopHandling">
            <summary>
            Prevents this key handler from receiving key presses by removing it from the list of handlers, if is currently handling keys.
            Otherwise, prints a warning to the console and does nothing.
            </summary>
        </member>
        <member name="T:WinMan.ResizeCalc">
            <summary>
            Function determining how a panel recalculates its size when the window is resized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WinMan.Panel">
            <summary>
            This class is designed to be subclassed by any entity that wishes to have a section of the root console on which to render.
            </summary>
        </member>
        <member name="F:WinMan.Panel.rootXCalc">
            <summary>
            Function that recalculates the X-position of top left corner of this panel on the root console.
            </summary>
        </member>
        <member name="F:WinMan.Panel.rootYCalc">
            <summary>
            Function that recalculates the Y-position of the top left corner of this panel on the root console.
            </summary>
        </member>
        <member name="F:WinMan.Panel.widthCalc">
            <summary>
            Function that reclaculates the width of the panel.
            </summary>
        </member>
        <member name="F:WinMan.Panel.heightCalc">
            <summary>
            Function that reclaculates the height of the panel.
            </summary>
        </member>
        <member name="F:WinMan.Panel.console">
            <summary>
            The offscreen console which the panel will update to.
            </summary>
        </member>
        <member name="P:WinMan.Panel.RootX">
            <summary>
            The X-coordinate of the top left corner of the section of the root console that this panel will begin rendering to.
            </summary>
        </member>
        <member name="P:WinMan.Panel.RootY">
            <summary>
            The Y-coordinate of the top left corner of the section of the root console that this panel will begin rendering to.
            </summary>
        </member>
        <member name="P:WinMan.Panel.Shown">
            <summary>
            Whether or not the panel is currently being rendered and accepting input - true if so, false if not.
            </summary>
        </member>
        <member name="P:WinMan.Panel.RealTimeUpdate">
            <summary>
            Whether or not the panel should run the code to update its offscreen console every frame. Things like menus, that don't change
            often if at all after initial rendering (outside of special cases like resizing), should not be real time, while something like a map
            camera panel should likely be real time.
            </summary>
        </member>
        <member name="P:WinMan.Panel.AcceptsKeyboardInput">
            <summary>
            Whether or not the panel needs to accept keyboard input.  If not, the OnKeyPress function will never be called.
            </summary>
        </member>
        <member name="P:WinMan.Panel.Width">
            <summary>
            The width of the section of the root console that this panel is rendering to.
            </summary>
        </member>
        <member name="P:WinMan.Panel.Height">
            <summary>
            The height of the section of the root console that this panel is rendering to.
            </summary>
        </member>
        <member name="E:WinMan.Panel.OnResizing">
            <summary>
            Called just before the console resizes.
            </summary>
        </member>
        <member name="E:WinMan.Panel.OnResize">
            <summary>
            Called after console resizes but before it updates layout.
            </summary>
        </member>
        <member name="M:WinMan.Panel.#ctor(WinMan.ResizeCalc,WinMan.ResizeCalc,WinMan.ResizeCalc,WinMan.ResizeCalc,System.Boolean,System.Boolean)">
            <summary>
            Constructs a panel.
            </summary>
            <param name="rootX">A function that takes no parameters and returns an int, saying where the X-coordinate of the top left corner of the section of the
            root console that the panel will render to should be.</param>
            <param name="rootY">A function that takes no parameters and returns an int, saying where the Y-coordinate of the top left corner of the section of the
            root console that the panel will render to should be.</param>
            <param name="width">A function that takes no parameters and returns an int, saying what the width of the section of the
            root console that the panel will render to should be.</param>
            <param name="height">A function that takes no parameters and returns an int, saying what the height of the section of the
            root console that the panel will render to should be.</param>
            <param name="acceptsKeyboardInput">Whether or not the panel will accept keyboard input (have its OnKeyPress function called) when it is
            being shown.</param>
            <param name="realTimeUpdate">Whether or not the panel should run the code to update its offscreen console every frame.</param>
        </member>
        <member name="M:WinMan.Panel.UpdateLayout(System.Object,RLNET.UpdateEventArgs)">
            <summary>
            Implement to update the panel's offscreen console.  A menu would draw all the text in this function, while a map camera might draw a section of the map.
            If RealTimeUpdate is true, this is called every frame before any panels start having their consoles blitted to the root console.  If RealTimeUpdate is false,
            this is called when the panel is shown, and when it is resized, in addition to any times it might be called manually.  The UpdateRealTimeLayouts event
            in Program is what triggers this in the case of real-time updating.  The z-level things are printed on ONLY has an effect within this panel.  Between panels,
            the last one shown gets drawn on top regardless of the z-level their text is drawn on.
            </summary>
            <param name="sender">The object sending the event, in the case RealTimeUpdate is true.  If RealTimeUpdate is false, this is a reference to the panel
            object it is a part of (this pointer).</param>
            <param name="e">The arguments sent by the event, in the case RealTimeUpdate is true.  If RealTimeUpdate is false, the UpdateEventArgs has a time value
            of 0.0.</param>
        </member>
        <member name="M:WinMan.Panel.Render(System.Object,RLNET.UpdateEventArgs)">
            <summary>
            Called every frame (if the panel is shown) automatically, via the Render event of Program.  Simply blits the panel's offscreen console to the appropriate
            section of the root console.
            </summary>
            <param name="sender">The object sending the Render event.</param>
            <param name="e">Contains the delta time between the last render frame and this one.</param>
        </member>
        <member name="M:WinMan.Panel.OnKeyPress(System.Object,WinMan.KeyPressEventArgs)">
            <summary>
            Should be implemented to handle keys apprpriately as the panel requires.  Default implementation does nothing.
            </summary>
            <param name="sender">Sender of key press event.</param>
            <param name="e">KeyPress arguments including the key pressed, etc.</param>
        </member>
        <member name="M:WinMan.Panel.Show">
            <summary>
            Causes the panel to be rendered (shown to the program user) each render frame, and to accept keyboard input if AcceptsKeyboardInput is true,
            if it is not already shown.  If RealTimeUpdate is true, the panel's UpdateLayout handler is added to the Program.UpdateRealTimeLayout event
            handler list.  If RealTimeUpdate is false, it simply calls UpdateLayout once.
            </summary>
        </member>
        <member name="M:WinMan.Panel.Hide">
            <summary>
            Causes the panel to stop being rendered (shown to the user) and to stop receiving keyboard input, if it is currently shown.
            If RealTimeUpdate is true, the panel's UpdateLayout handler is removed from the Program.UpdateRealTimeLayout event handler list.
            </summary>
        </member>
        <member name="T:WinMan.Screen">
            <summary>
            This class is designed to be subclassed to represent any collection of related panels.  This could be panels that resize relative to each other, or even
            just panels that will be shown and hidden as one unit.
            </summary>
        </member>
        <member name="P:WinMan.Screen.Shown">
            <summary>
            Whether or not the screen's panels are to be rendered (shown) or not.  call Show and Hide to change this.
            </summary>
        </member>
        <member name="M:WinMan.Screen.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WinMan.Screen.Show">
            <summary>
            Simply calls all panel's show functions, if the screens are not already showing.
            </summary>
        </member>
        <member name="M:WinMan.Screen.Hide">
            <summary>
            Calls all panel's hide functions, if the screen is not already hidden.
            </summary>
        </member>
        <member name="M:WinMan.Screen.SizeC(System.Int32)">
            <summary>
            Returns a resising delegate that always returns the size specified.  Ex., SizeC(10) returns you a function that always returns 10.
            </summary>
            <param name="size">The size for the generated lambda function to always return.</param>
            <returns>A lambda function that always returns the integer size specified.</returns>
        </member>
        <member name="M:WinMan.Screen.WidthMinus(System.Int32)">
            <summary>
            Returns a resizing delegate that returns the width of the root console, minus a specific value.  Ex,. WidthMinus(10) returns you a function
            that will return Engine.RootConsole.Width - 10
            </summary>
            <param name="subtract">Amount to subtract from the root console's width.</param>
            <returns>A lambda function that will return the root console's width, subtract the specified value when it is called.</returns>
        </member>
        <member name="M:WinMan.Screen.HeightMinus(System.Int32)">
            <summary>
            Returns a resizing delegate that returns the height of the root console, minus a specific value when it is called.  Ex,. HeightMinus(10)
            returns you a function that will return Engine.RootConsole.Height - 10.
            </summary>
            <param name="subtract">Amount to subtract from the root console's width.</param>
            <returns>A lambda function that will return the root console's height, subtract the specified value when it is called.</returns>
        </member>
        <member name="M:WinMan.Screen.HalfWidth">
            <summary>
            Returns a resizing delegate that returns exactly half the width of the root console when it is called.
            </summary>
            <returns>A lambda function that will return exactly half the root console's width.</returns>
        </member>
        <member name="M:WinMan.Screen.HalfHeight">
            <summary>
            Returns a resizing delegate that returns exactly half the height of the root console when it is called.
            </summary>
            <returns>A lambda function that will return exactly half the root console's height.</returns>
        </member>
        <member name="M:WinMan.Screen.addPanel(WinMan.Panel)">
            <summary>
            Adds the panel to a list that keeps track of all panels that are part of this screen.  This MUST be called from subclass's constructor when a new panel
            is created in order for show and hide to work properly.
            </summary>
            <param name="panel">The panel to add to the list.</param>
        </member>
        <member name="M:WinMan.Screen.removePanel(WinMan.Panel)">
            <summary>
            Removes a panel from an internal list.  Should a panel ever cease to be part of a screen, this function must be called at that time.
            </summary>
            <param name="panel">The panel that is no longer part of the screen.</param>
        </member>
    </members>
</doc>
